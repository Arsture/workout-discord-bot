name: Deploy Workout Discord Bot

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-northeast3  # 서울 리전
  SERVICE_NAME: workout-discord-bot
  REGION: asia-northeast3

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project dependencies
      run: poetry install --no-interaction --no-root

    - name: Run tests (if any)
      run: |
        poetry run python -m pytest tests/ -v || echo "No tests found"

    - name: Check Python syntax
      run: |
        poetry run python -m py_compile *.py || echo "Python syntax check completed"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Configure Docker to use gcloud as a credential helper'
      run: |
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Build Docker image
      run: |
        docker build -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA .

    - name: Push to Google Artifact Registry
      run: |
        docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA

    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # 환경변수 설정
        export GAR_LOCATION="asia-northeast3"
        export PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
        export SERVICE_NAME="workout-discord-bot"
        export GITHUB_SHA="${{ github.sha }}"
        
        # Docker 인증 설정
        sudo gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev --quiet
        
        # Docker 이미지 pull
        echo "Pulling Docker image..."
        sudo docker pull $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA
        
        # 기존 컨테이너 중지 및 제거
        echo "Stopping existing container..."
        sudo docker stop $SERVICE_NAME || true
        sudo docker rm $SERVICE_NAME || true
        
        # 새 컨테이너 실행
        echo "Starting new container..."
        sudo docker run -d \
          --name $SERVICE_NAME \
          --restart unless-stopped \
          -p 8080:8080 \
          -e DISCORD_TOKEN='${{ secrets.DISCORD_TOKEN }}' \
          -e SUPABASE_URL='${{ secrets.SUPABASE_URL }}' \
          -e SUPABASE_SERVICE_ROLE_KEY='${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}' \
          -e WORKOUT_CHANNEL_NAME='${{ secrets.WORKOUT_CHANNEL_NAME }}' \
          -e REPORT_CHANNEL_NAME='${{ secrets.REPORT_CHANNEL_NAME }}' \
          -e ADMIN_ROLE_NAME='${{ secrets.ADMIN_ROLE_NAME }}' \
          $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA
        
        # 컨테이너 상태 확인
        echo "Checking container status..."
        sudo docker ps | grep $SERVICE_NAME || echo "Container not found in ps"
        sudo docker logs $SERVICE_NAME --tail=20 || echo "Could not get logs"
        
        # 이전 이미지 정리
        echo "Cleaning up old images..."
        sudo docker image prune -f
        
        echo "Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh

    - name: Deploy to Compute Engine
      run: |
        gcloud compute scp deploy.sh ${{ secrets.INSTANCE_NAME }}:~/deploy.sh --zone=${{ secrets.INSTANCE_ZONE }} --quiet
        gcloud compute ssh ${{ secrets.INSTANCE_NAME }} --zone=${{ secrets.INSTANCE_ZONE }} --command="bash ~/deploy.sh" --quiet 